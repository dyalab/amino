/* 7dof.roboray
 * ===============
 *
 * 7-Degree-of-Freedom serial robot.
 */


/* Parameters for the robot */
def r 1.618;     // a ratio

def rad 0.05; // Link radius
def len0 1;      // upper arm length
def len1 1;      // forearm length

/* Define classes for robot parts */
class link {
    shape cylinder;
    radius rad;
    color [.5, .5, .5];
    specular [.75, .75, .75];
}

class joint_style {
    color [0, 0, 0];
    specular [.5, .5, .5];
}

/* Draw the grid */
frame grid {
    geometry {
        shape grid;
        delta [.1, .1];
        thickness .005;
        dimension [1, 1];
    }
}


/* Draw the robot */

// Shoulder
frame s0 {
    type revolute;  # frame type: revolute joint
    axis [1, 0, 0]; # joint axis
    geometry {
        isa joint_style; # instance of joint_style class
        shape sphere;
        radius r*rad;
    }
}

frame s1 {
    parent s0;
    type revolute;
    axis [0, 1, 0];
}

frame s2 {
    parent s1;
    type revolute;
    axis [1, 0, 0];

    // nested frame is a child of s2
    frame upper-link {
        rpy  [0, pi/2, 0];
        geometry {
            isa link;
            height len0;
        }
    }
}


// Elbow
frame e {
    parent s2;
    type revolute;
    axis [0,1,0];
    translation [len0, 0, 0];

    frame e-link {
        rpy [pi/2, 0, 0];
        translation [0, rad, 0];
        geometry {
            isa joint_style;
            shape cylinder;
            height 2*rad;
            radius r*rad;
        }
    }

    frame lower-link {
        rpy [0, pi/2, 0];
        geometry {
            isa link;
            height len1;
        }
    }
}

// Wrist
frame w0 {
    parent e;
    type revolute;
    axis [1, 0, 0];
    translation [len1, 0, 0];
}

frame w1 {
    parent w0;
    type revolute;
    axis [0, 1, 0];
}

frame w2 {
    parent w1;
    type revolute;
    axis [0, 0, 1];

    geometry {
        isa joint_style;
        shape sphere;
        radius r*rad;
    }
}

// Hand (Palm)
def hand_rad r**2 * rad;
def hand_height r*rad;

frame hand {
    parent w2;
    type fixed;
    rpy [0, pi/2, 0];
    translation [hand_height, 0, 0];
    geometry {
        isa link;
        shape cone;
        height -hand_height;
        start_radius hand_rad;
        end_radius r*rad;
    }
}


// Fingers
def finger_rad rad / r**2;
def finger_len finger_rad * r**4;
def finger_base_rad finger_rad*r;
def finger_off hand_rad - finger_base_rad;

class finger_base {
    isa joint_style;
    shape sphere;
    radius finger_base_rad;
}

class finger_link {
    isa link;
    shape cylinder;
    radius finger_rad;
    height finger_len;
}

class finger_tip {
    isa link;
    shape sphere;
    radius finger_rad;
}

frame f0 {
    parent hand;
    translation [finger_off, 0, finger_base_rad];
    type revolute;
    axis [0, -1, 0];

    geometry { isa finger_base; }
    geometry { isa finger_link; }

    frame f0tip {
        translation [0, 0, finger_len];
        geometry { isa finger_tip; }
    }
}

frame f1base {
    parent hand;
    rpy [0, 0, 2/3*pi];

    frame f1 {
        axis [0, -1, 0];
        type revolute;
        translation [finger_off, 0, finger_base_rad];
        geometry { isa finger_base; }
        geometry { isa finger_link; }

        frame f1tip {
            translation [0, 0, finger_len];
            geometry { isa finger_tip; }
        }
    }

}


frame f2base {
    parent hand;
    rpy [0, 0, -2/3*pi];

    frame f2 {
        axis [0, -1, 0];
        type revolute;
        translation [finger_off, 0, finger_base_rad];
        geometry { isa finger_base; }
        geometry { isa finger_link; }
        frame f2tip {
            translation [0, 0, finger_len];
            geometry { isa finger_tip; }
        }
    }
}
